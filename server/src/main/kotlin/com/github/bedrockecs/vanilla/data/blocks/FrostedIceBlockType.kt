// generated by becs datacompiler, DO NOT EDIT!
package com.github.bedrockecs.vanilla.`data`.blocks

import com.github.bedrockecs.vanilla.`data`.items.ItemID
import kotlinx.serialization.Serializable
import kotlin.Boolean
import kotlin.Int
import kotlin.Short
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Serializable
public data class FrostedIceBlockType private constructor(
    public override val runtimeID: Short,
    public val age: Int
) : VanillaBlockType {
    public override val blockType: String = Companion.blockType

    public fun with(age: Int = this.age): FrostedIceBlockType {
        val e = FrostedIceBlockType(0.toShort(), age)
        return allInstances.find { it.compareVariantProperties(e) }!!
    }

    @Suppress("UNUSED_PARAMETER")
    public fun compareVariantProperties(other: FrostedIceBlockType): Boolean {
        var ret = true
        ret = ret && (this.age == other.age)
        return ret
    }

    public companion object : VanillaBlockType.ICompanion {
        public override val blockType: String = "minecraft:frosted_ice"

        public override val itemID: ItemID = ItemID(207)

        private lateinit var instance4873: FrostedIceBlockType

        private lateinit var instance4874: FrostedIceBlockType

        private lateinit var instance4875: FrostedIceBlockType

        private lateinit var instance4876: FrostedIceBlockType

        init {
            init0()
        }

        public override val primary: FrostedIceBlockType = instance4873

        public override val allInstances: List<FrostedIceBlockType> =
            listOf(instance4873, instance4874, instance4875, instance4876)

        public fun init0() {
            instance4873 = FrostedIceBlockType(4873.toShort(), 0)
            instance4874 = FrostedIceBlockType(4874.toShort(), 1)
            instance4875 = FrostedIceBlockType(4875.toShort(), 2)
            instance4876 = FrostedIceBlockType(4876.toShort(), 3)
        }
    }
}
